services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - kafka-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      # CONFIGURACIÓN CORREGIDA - puertos diferentes
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,EXTERNAL://172.20.10.12:29092,
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"   # Para conexiones internas
      - "29092:29092" # Para conexiones externas
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "kafka-topics", "--list", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 40s

  kafka-init:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - kafka
    command: >
      sh -c "
        sleep 5 &&
        echo 'Creando tópicos...' &&
        kafka-topics --create --topic ev_charging_events --partitions 3 --replication-factor 1 --bootstrap-server kafka:9092 || true &&
        kafka-topics --create --topic ev_charging_commands --partitions 3 --replication-factor 1 --bootstrap-server kafka:9092 || true &&
        kafka-topics --create --topic ev_charging_status --partitions 3 --replication-factor 1 --bootstrap-server kafka:9092 || true &&
        kafka-topics --create --topic ev_payment_transactions --partitions 3 --replication-factor 1 --bootstrap-server kafka:9092 || true &&
        kafka-topics --create --topic ev_charging_metrics --partitions 3 --replication-factor 1 --bootstrap-server kafka:9092 || true &&
        kafka-topics --create --topic ev_charging_alerts --partitions 3 --replication-factor 1 --bootstrap-server kafka:9092 || true &&
        kafka-topics --create --topic engine_status --partitions 3 --replication-factor 1 --bootstrap-server kafka:9092 || true &&
        kafka-topics --create --topic engine_suministro --partitions 3 --replication-factor 1 --bootstrap-server kafka:9092 || true &&
        kafka-topics --create --topic supply_flow --partitions 3 --replication-factor 1 --bootstrap-server kafka:9092 || true &&
        kafka-topics --create --topic driver_responses --partitions 3 --replication-factor 1 --bootstrap-server kafka:9092 || true &&
        kafka-topics --create --topic driver_requests --partitions 3 --replication-factor 1 --bootstrap-server kafka:9092 || true &&
        echo 'Tópicos creados:' &&
        kafka-topics --list --bootstrap-server kafka:9092
      "
    profiles:
      - init
    networks:
      - kafka-network

  cp_engine:
    build: ./cp_engine
    depends_on:
      kafka:
        condition: service_healthy
    command: ["tail", "-f", "/dev/null"]
    networks:
      - kafka-network
    ports:
      - "6000:6000"
      - "6001:6001"
      - "6002:6002"
      - "6003:6003"
      - "6004:6004"

  cp_monitor:
    build: ./cp_monitor
    depends_on:
      kafka:
        condition: service_healthy
    command: ["tail", "-f", "/dev/null"]
    networks:
      - kafka-network

  driver:
    build: ./driver
    depends_on:
      kafka:
        condition: service_healthy
    command: ["tail", "-f", "/dev/null"]
    networks:
      - kafka-network

  central:
    build: ./central
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "5000:5000"
    networks:
      - kafka-network
    volumes:
      - ./central_logs:/app/logs           # Logs en host
      #- ./central_data:/app/data               # Datos en host  
      - ./central_backups:/app/backups     # Backups en host
    environment:
      - SOCKET_HOST=0.0.0.0
      - SOCKET_PORT=5000
      - KAFKA_SERVERS=localhost:9092
      - LOG_DIR=/app/logs
      - DATA_FILE=/app/ev_central_data.json
      - BACKUP_DIR=/app/backups
    command: ["tail", "-f", "/dev/null"]
networks:
  kafka-network:
    driver: bridge
