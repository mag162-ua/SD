services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "29092:29092"
    #volumes:
    #  - ./kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-topics", "--list", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 40s
  kafka-init:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - kafka
    command: >
      sh -c "
        sleep 30 &&
        echo 'Creando tópicos...' &&
        kafka-topics --create --topic ev_charging_commands --partitions 3 --replication-factor 1 --bootstrap-server kafka:9092 &&
        kafka-topics --create --topic ev_charging_status --partitions 3 --replication-factor 1 --bootstrap-server kafka:9092 &&
        kafka-topics --create --topic ev_payment_transactions --partitions 3 --replication-factor 1 --bootstrap-server kafka:9092 &&
        kafka-topics --create --topic ev_charging_metrics --partitions 3 --replication-factor 1 --bootstrap-server kafka:9092 &&
        kafka-topics --create --topic ev_charging_alerts --partitions 3 --replication-factor 1 --bootstrap-server kafka:9092 &&
        echo 'Tópicos creados:' &&
        kafka-topics --list --bootstrap-server kafka:9092
      "
    profiles:
      - init
  cp_engine:
    build: ./cp_engine
    depends_on:
      kafka:
        condition: service_healthy
    command: ["python", "ev_cp_engine.py"]

  cp_monitor:
    build: ./cp_monitor
    depends_on:
      kafka:
        condition: service_healthy
    command: ["python", "ev_cp_monitor.py"]

  driver:
    build: ./driver
    depends_on:
      kafka:
        condition: service_healthy
    command: ["python", "ev_driver.py"]

  central:
    build: ./central
    depends_on:
      kafka:
        condition: service_healthy
    command: ["python", "ev_central.py"]